@using WebApplication3.Models;

@{
    ViewBag.Title = "Prediction";
}

<h2>Prediction</h2>

@using (Html.BeginForm("Index", "Predict", FormMethod.Post, new { @id = "frmPredict", @enctype = "multipart/form-data" }))
{
    <table border="0" cellpadding="0" cellspacing="0">
        <tr valign="top">
            <td>
                <input type="file" id="ImageFile" name="ImageFile" onchange='document.getElementById("frmPredict").submit();' />
            </td>
        </tr>
    </table>
}

<br />

@if (ViewData["ImageBase64String"] != null && ViewData["ImageBase64String"].ToString().Trim().Length > 0)
{
    using (Ajax.BeginForm("Predict", "Predict", new AjaxOptions { HttpMethod = "POST", OnBegin = "frmPredict_Begin", OnSuccess = "frmPredict_Success", OnFailure = "frmPredict_Failure" }, new { @id = "frmPredict" }))
    {
        <table border="0" cellpadding="0" cellspacing="0">
            <tr valign="top">
                <td>
                    <div class="image-cropper">
                        <input type="hidden" name="ImageBase64String" id="ImageBase64String" value="@ViewData["ImageBase64String"]" />
                        <input type="hidden" name="ImageContentType" id="ImageContentType" value="@ViewData["ImageContentType"]" />
                        <input type="hidden" name="ImageContentLength" id="ImageContentLength" value="@ViewData["ImageContentLength"]" />
                        <input type="hidden" name="ImageExtension" id="ImageExtension" value="@ViewData["ImageExtension"]" />
                        <input type="hidden" name="ImageCoordsX" id="ImageCoordsX" value="" />
                        <input type="hidden" name="ImageCoordsY" id="ImageCoordsY" value="" />
                        <input type="hidden" name="ImageCoordsX2" id="ImageCoordsX2" value="" />
                        <input type="hidden" name="ImageCoordsY2" id="ImageCoordsY2" value="" />
                        <img class="image" name="ImageDisplay" id="ImageDisplay" src="data:@ViewData["ImageContentType"];base64,@ViewData["ImageBase64String"]"><br />
                    </div>
                </td>
                <td>
                    &nbsp;&nbsp;&nbsp;
                </td>
                <td>
                    Select area on image and click Predict button.<br /><br />
                    <input type="submit" id="Predict" name="Predict" value="Show Personalised Recommendations" />
                    <br /><br />
                    <div id="PredictImageDisplay"></div>
                    <br />
                </td>
                <td>
                    &nbsp;&nbsp;&nbsp;
                </td>
                <td>
                    <div id="PercentageDisclaimer"></div>
                    <br /><br />
                    <table id="tblPredictionResult"></table>
                    <style>
                        table#tblPredictionResult {
                            border-collapse: collapse;
                            width: 100%;
                        }

                            table#tblPredictionResult th, table#tblPredictionResult td {
                                text-align: left;
                                padding: 8px;
                            }

                            table#tblPredictionResult tr:nth-child(even) {
                                background-color: #f2f2f2
                            }

                            table#tblPredictionResult th {
                                background-color: #4CAF50;
                                color: white;
                            }
                    </style>
                </td>
            </tr>
        </table>
        <br />
        <input type='hidden' name='strongTagStrings' id='strongTagStrings' />
        <table border="0" cellspacing="0" cellpadding="0">
            <tr valign="middle">
                <td>
                    <div id='StrongTagsDiv'></div>
                </td>
                <td>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                </td>
                <td>
                    <style>
                        /*start of mic*/
                        .gn{
                          position:relative;
                          margin: 5% auto;
                          background-color:#222;
                          border-radius:50%;
                          width:3em; height:3em;
                        }
                        :before, :after{
                          content:'';
                          position:absolute;
                          background-color: #dddddd;
                        }
                        .gn:after{
                          top:30%; left:43%;
                          height:15%; width:14%;
                          border-top-left-radius:50%;
                          border-top-right-radius:50%;
                        }
                        .gn:before{
                          top:40%; left:43%;
                          height:15%; width:14%;
                          border-bottom-left-radius:50%;
                          border-bottom-right-radius:50%;
                        }
                        .gn:hover:after{
                          background-color: #fff;
                        }
                        .gn:hover:before{
                          background-color: #fff;
                        }
                        .mc{
                          position:absolute;
                          top:50%; left:37%;
                          height:24%;
                          width:26.5%;
                          overflow:hidden;
                        }
                        .mc:before{
                          bottom:50%;
                          width:100%; height:100%;
                          box-sizing:border-box;
                          border-radius:50%;
                          border:0.1em solid #dddddd;
                          background:none;
                        }
                        .mc:after{
                          top:50%; left:40%;
                          width:20%; height:25%;
                        }
                        .mc:hover:before{
                        border:0.1em solid #fff;
                        }
                        /*end of mic*/
                    </style>
                    <div id='micDiv'></div>
                </td>
            </tr>
        </table>
        <br />
        <input type='hidden' name='voice' id='voice' />
        <div id='VoiceRecognitionDiv'></div>
        <div id="DummyVoiceDiv"></div>
        <table id="tblInventory"></table>

        <script type="text/javascript">
            SetImageCropper($("#ImageDisplay"))
            $("#Predict").prop("disabled", true);
        </script>

    }
}

@section OptionalScript
{
<script type="text/javascript">
    jQuery.browser = {};
    (function () {
        jQuery.browser.msie = false;
        jQuery.browser.version = 0;
        if (navigator.userAgent.match(/MSIE ([0-9]+)\./)) {
            jQuery.browser.msie = true;
            jQuery.browser.version = RegExp.$1;
        }
    })();
</script>
<script src="~/Scripts/jquery.Jcrop.js" type="text/javascript"></script>
<link href="~/Content/jquery.Jcrop.css" type="text/css" rel="stylesheet" />
<script type="text/javascript">
    var recognition = new webkitSpeechRecognition();
    var recognizing = false;
    var manualVoiceStart = false;

    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.onresult = Recognition_Result;
    recognition.onstart = Recognition_Start;
    recognition.onend = Recognition_End;
    recognition.onerror = Recognition_Error;


    function Recognition_Result(e) {
        if (e.results.length > 0) {
            var bin = e.results[e.results.length - 1];

            if (bin.isFinal && $("#VoiceRecognitionDiv").length) {
                CallVoiceAsync(bin[0].transcript);
            }
        }
    }

    function CallVoiceAsync(voice) {
        stopVoiceRecognition();
        $("#voice").val(voice);

        $("#VoiceRecognitionDiv").html("<b>You:</b>&nbsp;" + voice);
        $('html, body').animate({ scrollTop: $('#VoiceRecognitionDiv').offset().top - 200 }, 'slow');

        $.ajax({
            url: 'Predict/HandleVoice',
            type: 'POST',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            success: HandleVoice_Success,
            error: HandleVoice_Failure,
            data: $("#strongTagStrings, #voice").serialize(),
            dataType: 'json'
        });
    }

    function Recognition_Start() {
        recognizing = true;
    }

    function Recognition_End() {
        recognizing = false;
        if (manualVoiceStart) {
            //setTimeout(function () { startVoiceRecognition(); }, 2000);
            startVoiceRecognition();
        }
    }

    function Recognition_Error(event) {
        recognizing = false;
    }


    function startVoiceRecognition() {
        manualVoiceStart = true;
        if (!recognizing) {
            recognition.start();
        }
    }

    function stopVoiceRecognition() {
        manualVoiceStart = false;
        if (recognizing) {
            recognition.abort();
        }
    }

    function HandleVoice_Success(data, status, xhr) {
        $("#Predict").prop("disabled", false);
        $("#minimumPredictionPercentage").prop("disabled", false);
        //startVoiceRecognition(); change 20171012

        if (data.ChangeInventory) {
            if (status == "success" && xhr.status == 200) {
                displayInventory(data);

                $("#VoiceRecognitionDiv").html("<b>You:</b>&nbsp;" + data.Voice + "&nbsp;<b>Intent:</b>&nbsp;" + data.Intent + "&nbsp;<b>Entities:</b>&nbsp;" + data.Entities);
            }
            else {
                displaySingleLineMessageInInventory("Error occurred.");
            }
        }
    }

    function HandleVoice_Failure(xhr, status, error) {
        $("#Predict").prop("disabled", false);
        $("#minimumPredictionPercentage").prop("disabled", false);
        //startVoiceRecognition(); change 20171012

        displaySingleLineMessageInInventory(error);
    }


    function frmPredict_Success(data, status, xhr) {
        $("#Predict").prop("disabled", false);

        if (status == "success" && xhr.status == 200) {
            $("#PredictImageDisplay").html("<img src='data:" + data.PredictionImageContentType + ";base64," + data.PredictionImageBase64String + "' width='300' />");
            $("#PercentageDisclaimer").html("Images with tags matching more than or equal to <input type='text' onchange='handleTextChange()' name='minimumPredictionPercentage' id='minimumPredictionPercentage' value='" + data.MinimumPredictionPercentage + "' size='4' /> prediction percentage will be shown below.");

            displayPredictionResult(data);

            displayInventory(data);

            //startVoiceRecognition(); change 20171012
        }
        else {
            displayError("Error occurred.");
        }
    }

    function frmPredict_Failure(xhr, status, error) {
        $("#Predict").prop("disabled", false);

        displayError(error);
    }

    function frmPredict_Begin(xhr) {
        $("#Predict").prop("disabled", true);
        $("#VoiceRecognitionDiv").html("");
        stopVoiceRecognition();
    }

    function displayPredictionResult(data) {
        var content = "<tr valign='top'><th>tag</th><th>percentage</th></tr>";

        for (var i = 0; i < data.Predictions.length; i++) {
            content += "<tr valign='top'><td>";
            content += "<input type='hidden' id='predictions[" + i + "].Tag' name='predictions[" + i + "].Tag' value='" + data.Predictions[i].Tag + "' />";
            content += "<input type='hidden' id='predictions[" + i + "].Probability' name='predictions[" + i + "].Probability' value='" + data.Predictions[i].Probability + "' />";
            content += "<input type='hidden' id='predictions[" + i + "].MappingTagID' name='predictions[" + i + "].MappingTagID' value='" + data.Predictions[i].MappingTagID + "' />";
            content += "<input type='hidden' id='predictions[" + i + "].MappingTagString' name='predictions[" + i + "].MappingTagString' value='" + data.Predictions[i].MappingTagString + "' />";
            content += data.Predictions[i].MappingTagString + "</td><td>" + (Math.round(data.Predictions[i].Probability * 10000) / 100).toString();
            content += "</td></tr>";
        }

        $("#tblPredictionResult").html(content);
    }

    function displayInventory(data) {
        $("#strongTagStrings").val("");
        $("#StrongTagsDiv").html("");
        $("#micDiv").html("<a href='javascript:startVoiceRecognition()'><div class='gn'><i class='mc'></i></div></a>");

        if (data.StrongTagStrings.length > 0) {
            $("#strongTagStrings").val(data.StrongTagStrings);
            $("#StrongTagsDiv").html("Recommended filters: <b>" + data.StrongTagStrings + "</b>");
        }

        @if (Settings.ApplyDummyVoice)
        {
            @:$("#DummyVoiceDiv").html("<input type='button' value='Say: @Settings.DummyVoice' onclick='CallVoiceAsync(\"@Settings.DummyVoice\")' /><br /><br />");
        }


        var content = "";

        content += "<tr valign='middle'>";

        for (var i = 0; i < data.Images.length; i++) {
            content += "<td><img src='ImageFiles/" + data.Images[i].Filename + "' width='350' /><br /></td>";
            if (((i + 1) % 3) == 0) {
                content += "</tr><tr valign='middle'>";
            }
        }

        if ((data.Images.length > 3) && ((i % 3) != 0)) {
            for (var r = 1; r <= (3 - (i % 3)); r++) {
                content += "<td>&nbsp;</td>";
            }
        }

        content += "</tr>";

        $("#tblInventory").prop("border", "2");
        $("#tblInventory").prop("style", "border: 1px solid #d0d0d0;");
        $("#tblInventory").prop("cellpadding", "5");
        $("#tblInventory").prop("cellspacing", "5");
        $("#tblInventory").html(content);
    }

    function displayError(error) {
        $("#PredictImageDisplay").text(error);

        $("#PercentageDisclaimer").text("");

        $("#tblPredictionResult").html("");

        displaySingleLineMessageInInventory("");
    }

    function displaySingleLineMessageInInventory(message) {
        $("#tblInventory").html("<tr valign='top'><td>" + message + "</td></tr>");
        $("#tblInventory").prop("border", "0");
        $("#tblInventory").prop("style", "");
        $("#tblInventory").prop("cellpadding", "0");
        $("#tblInventory").prop("cellspacing", "0");
    }

    function handleTextChange() {
        $("#VoiceRecognitionDiv").html("");
        $.ajax({
            url: 'Predict/MinimumPredictionPercentage',
            type: 'POST',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            success: MinimumPredictionPercentage_Success,
            error: MinimumPredictionPercentage_Failure,
            data: $("#minimumPredictionPercentage, [id^=predictions\\[]").serialize(),
            dataType: 'json'
        });
        $("#Predict").prop("disabled", true);
        $("#minimumPredictionPercentage").prop("disabled", true);

        displaySingleLineMessageInInventory("Fetching...");
    }

    function MinimumPredictionPercentage_Success(data, status, xhr) {
        $("#Predict").prop("disabled", false);
        $("#minimumPredictionPercentage").prop("disabled", false);

        if (status == "success" && xhr.status == 200) {
            displayInventory(data);
        }
        else {
            displaySingleLineMessageInInventory("Error occurred.");
        }
    }

    function MinimumPredictionPercentage_Failure(xhr, status, error) {
        $("#Predict").prop("disabled", false);
        $("#minimumPredictionPercentage").prop("disabled", false);

        displaySingleLineMessageInInventory(error);
    }

    function ajaxindicatorstart(text) {
        if (jQuery('body').find('#resultLoading').attr('id') != 'resultLoading') {
            jQuery('body').append('<div id="resultLoading" style="display:none"><div><img src="Images/ajax-loader.gif"><div>' + text + '</div></div><div class="bg"></div></div>');
        }

        jQuery('#resultLoading').css({
            'width': '100%',
            'height': '100%',
            'position': 'fixed',
            'z-index': '10000000',
            'top': '0',
            'left': '0',
            'right': '0',
            'bottom': '0',
            'margin': 'auto'
        });

        jQuery('#resultLoading .bg').css({
            'background': '#000000',
            'opacity': '0.7',
            'width': '100%',
            'height': '100%',
            'position': 'absolute',
            'top': '0'
        });

        jQuery('#resultLoading>div:first').css({
            'width': '250px',
            'height': '75px',
            'text-align': 'center',
            'position': 'fixed',
            'top': '0',
            'left': '0',
            'right': '0',
            'bottom': '0',
            'margin': 'auto',
            'font-size': '16px',
            'z-index': '10',
            'color': '#ffffff'

        });

        jQuery('#resultLoading .bg').height('100%');
        jQuery('#resultLoading').fadeIn(300);
        jQuery('body').css('cursor', 'wait');
    }

    function ajaxindicatorstop() {
        jQuery('#resultLoading .bg').height('100%');
        jQuery('#resultLoading').fadeOut(300);
        jQuery('body').css('cursor', 'default');
    }

    jQuery(document).ajaxStart(function () {
        //show ajax indicator
        ajaxindicatorstart('processing.. please wait..');
    }).ajaxStop(function () {
        //hide ajax indicator
        ajaxindicatorstop();
    });

    function SetImageCropper(image) {
        //Define a function to execute when the cropping rectangle changes.
        var update = function (coords) {
            if (parseInt(coords.w) <= 0 || parseInt(coords.h) <= 0) {
                $("#Predict").prop("disabled", true);
                return; //Require valid width and height
            }
            else {
                $("#Predict").prop("disabled", false);
                $("#ImageCoordsX").val(coords.x);
                $("#ImageCoordsY").val(coords.y);
                $("#ImageCoordsX2").val(coords.x2);
                $("#ImageCoordsY2").val(coords.y2);

                //Build the URL based on the coordiantes. The resizing module will handle everything else.
                //var url = path + '?crop=(' + coords.x + ',' + coords.y + ',' + coords.x2 + ',' + coords.y2 +
                //   ')&cropxunits=' + image.width() + '&cropyunits=' + image.height()
            }
        }

        //Start up jCrop on the image, specifying our function be called when the selection rectangle changes,
        // and that a 60% black shadow should cover the cropped regions.
        image.Jcrop({ onChange: update, onSelect: update, bgColor: 'black', bgOpacity: 0.6 });
    }

</script>

}